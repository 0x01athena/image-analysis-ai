// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Product {
  id               String   @id @default(cuid())
  managementNumber String   @unique
  title            String?
  candidateTitles  String   @default("[]") // JSON string for SQLite compatibility
  measurementType  String?  // JSON string for SQLite compatibility - stores {"foreign":"EUR 44", "japanese":"日本サイズ28.5cm"}
  level            String?
  measurement      String?
  condition        String?
  category         String?
  shop1            String?
  shop2            String?
  shop3            String?
  price            Float?   // Price for the product
  images           String   @default("[]") // JSON string for SQLite compatibility
  userId           String?  // User who processed this product
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("products")
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  workProcesses WorkProcess[]
  products      Product[]
  
  @@map("users")
}

model WorkProcess {
  id                String    @id @default(cuid())
  userId            String
  productIds        String   
  currentProductId  String? 
  finishedProducts  Int       @default(0)
  isFinished        Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("work_processes")
}
